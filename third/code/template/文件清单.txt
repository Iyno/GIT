01.js 输出语法
02.js 条件判断
03.js 数据循环
04.js 子模板
05.js 模板继承
06.js 模板配置

2模板引擎语法
2.1 模板语法
1、art-template同时支持两种模板语法：标准语法和原始语法
2、标准语法可以让模板更加容易读写，原始语法具有更强大的逻辑处理能力
   标准语法：{{ 数据 }}
   原始语法：<%=数据%>

2.2 输出
将某项数据输出在模板中，标准语法和原始语法如下：
   标准语法：{{ 数据 }}
   原始语法：<%=数据%>
       // 标准语法
    <p>{{ name }}</p>
    <p>{{ 1 + 2 }}</p>
    <p>{{ 1 + 1 == 2? '相等' : '不相等'}}</p>
    <p> {{ content }}</p>

    // 原始语法
    <p><%= name %></p>
    <p><%= 1 + 2 %></p>
    <p><%= 1 + 1 == 2? '等于':'不等于'%></p>
    <p><%= content%></p>

2.3原文输出
如果数据中携带HTML标签，默认模板引擎不会解析标签，会将其转义后输出
   1、标准语法: {{@数据}}
    <p> {{@ content }}</p>      
   2、原始语法：<%- 数据%>
    <p><%- content%></p>

2.4条件判断
在模板中可以根据条件来决定显示哪块HTML代码
// 标准语法
    {{if 条件}}...{{/if}}
    {{if v1}}...{{else if v2}}...{{/if}}

//原始语法
    <% if (value) {%>...<% } %> 
    <% if (v1) {%>...<%} else if (v2) {%>...<%}%> 

2.5 循环
标准语法：{{each 数据}}{{/each}}
原始语法：<% for(){%> <%}%>
 //标准语法示例：
    {{each target}}
            {{$index}}
            {{$value}}
    {{/each}}
 
 // 原始语法示例
    <% for (var i = 0; i < target.length; i++) { %>
            <%=target[i].name %><%=i %>
    <% } %>

2.6 子模板
使用子模板可以将网站公共区域（头部、底部）抽离到单独的文件中
1、标准语法：{{include '模板'}}
2、原始语法： <% include('模板')%>

示例：
标准语法：
{{ include './common/header.art' }}
原始语法：
<% include('./common/header.art')%>


2.7 模板继承
使用模板继承可以将网站HTML骨架抽离到单独的文件中，其他页面模板可以继承骨架文件

2.8模板继承示例
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTML骨架继承</title>
    {{block 'head'}} {{/block}}
</head>
<body>
    {{block 'content'}} {{/block}}   
</body>
</html>


<!-- index.art 首页模板 -->
{{extent './layout.art'}}
{{block 'head'}} <link rel="stylesheet" href="custom.css"> {{/block}}
{{block 'content'}} <p>This is just an awesome page.</p> {{/block}}

2.9 模板配置
1、向模板中导入变量 template.defaults.imports.变量名 = 变量值;
2、设置模板根目录 template.defaults.root = 模板目录
3、设置模板默认后缀 template.defaults.extname = '.art'


3.1 案例介绍--学生档案管理
目标：模板引擎应用，强化node.js项目制作流程
知识点：http 请求响应、数据库、模板引擎、静态资源访问
3.2制作流程
1、建立项目文件夹并生成项目描述文件
2、创建网站服务器实现客户端和服务器端通信
3、连接数据库并根据需求设计学员信息表
4、创建路由并实现页面模板呈递
5、实现静态资源访问
6、实现学生信息添加功能
7、实现学生信息展示功能

3.3第三方模块router
功能：实现路由
使用步骤：
1、获取路由对象
2、调用路由对象提供的方法创建路由
3、启用路由，使路由生效
const getRouter = require('router')
const router = getRouter();
router.get('./add',(req,res) => {
    res.end('hello world!')
})
server.on('request',(req,res) => {
    router(req,res)
})